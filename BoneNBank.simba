 program DJ93BoneNBank;
{$define SMART}
{$I SRL/OSR.simba}
{$I RSWalker/Walker.simba}

//Declare Constants
const
  CLUSTER = 3;
  SIZE = 10;

  LOGIN_NAME = '';
  LOGIN_PASS = '';
  RS_WORLD = 301;
  IS_MEMBER = false;


//Declare Variables
var
  Walk: TRSWalker;
  pLumbyCourt, pGobYard, boneCoordArray: TPointArray;
  boneTime, invTime: TTimeMarker;
  Antiban: TAntiban;
  log, boneCount: Integer;

//Procedure: declarePlayers
procedure declarePlayers();
begin
  with Players.New()^ do
  begin
    LoginName := LOGIN_NAME;
    Password := LOGIN_PASS;
    IsActive := True;
    IsMember := IS_MEMBER;
    World := RS_WORLD;
  end;
  Players.SetCurrent(0);
end;

//Procedure: setupAntiban
procedure setupAntiban();
begin
  Antiban.Init(SKILL_TOTAL, 4);

  Antiban.AddTask([@Antiban.LoseFocus,     ONE_MINUTE*5]);
  Antiban.AddTask([@Antiban.HoverPlayers,  ONE_MINUTE*8]);
  Antiban.AddTask([@Antiban.CheckStats,    ONE_MINUTE*10]);
  Antiban.AddTask([@Antiban.OpenRandomTab, ONE_MINUTE*10]);
  Antiban.AddTask([@Antiban.VeryShortBreak,ONE_MINUTE*25]);
  Antiban.AddTask([@Antiban.DoMiscStuff,   ONE_MINUTE*25]);
  Antiban.AddTask([@Antiban.RandomCompass, ONE_MINUTE*45]);

  Antiban.AddBreak([35 * ONE_MINUTE, 05 * ONE_MINUTE, 0.05]);
  Antiban.AddBreak([02 * ONE_HOUR,   15 * ONE_MINUTE, 0.20]);
  Antiban.AddBreak([05 * ONE_HOUR,   45 * ONE_MINUTE, 0.85]);
  Antiban.AddBreak([16 * ONE_HOUR,   08 * ONE_HOUR,   0.99]);
end;

//Procedure: myAntiban
procedure myAntiban();
begin
  if not SRL.isLoggedIn() then
    Exit;

  SRL.DismissRandom();
  Antiban.DoAntiban();
end;

//Procedure: walkTo(path : TPointArray)
procedure walkTo(path : TPointArray);
begin
  myAntiban();
  Walk.WalkPath(path);
end;

//Function: setUp() : boolean
function setUp() : boolean;
var
  txt: String;
  textStringArray: TStringArray;
  coordExtArray: TExtendedArray;

begin
  {$IFDEF SMART}
    Smart.EnableDrawing := True;
  {$ENDIF}

  SRL.Setup();

  //log := CreateFile('C:\Simba\Scripts\looting\log.txt');
  log := OpenFile('C:\Simba\Scripts\looting\log.txt', True);
  ReadFileString(log, txt, FileSize(log));
  CloseFile(log);
  textStringArray := txt.Explode('][');
  for txt in textStringArray do
  begin
    coordExtArray := txt.ExtractNumbers;
    if(coordExtArray.Len() = 2) then
    begin
      boneCoordArray.Append(Point(Round(coordExtArray[0]), Round(coordExtArray[1])));
    end;
  end;
  Writeln(boneCoordArray);
  boneCount := 0;

  Walk.Init('lumby.png', -1);
  pLumbyCourt := [Point(349, 109), Point(337, 169), Point(334, 229), Point(346, 278), Point(347, 330), Point(273, 335), Point(226, 361), Point(188, 380), Point(156, 391)];
  pGobYard := [Point(155, 391), Point(188, 362), Point(264, 360), Point(307, 334), Point(333, 283)];
  Walk.MinRunEnergy := 101;

  setupAntiban();
  declarePlayers();

  if not SRL.isLoggedIn() then
  begin
    Players.LoginCurrent();
    MainScreen.setAngle(True);
  end;

  Result := True;
end;

//Procedure: waitLoop
procedure waitLoop();
var
  InvCount: Integer;
  T: TTimeMarker;
begin
  if not SRL.isLoggedIn() then
    Exit;

  InvCount := Inventory.Count();
  T.Start;
  repeat
    wait(randomRange(75,250));
    {$IFDEF SMART}
      Smart.Image.Clear;
      Smart.Image.DrawText('Bones: ' + IntToStr(boneCount), Point(615, 207), clBlue);
      Smart.Image.DrawText('Inv Time: ' + IntToStr(Round(invTime.GetTime()/1000)) + ' s', Point(615, 453), clBlue);
    {$ENDIF}
  until((Inventory.Count() > InvCount) or (not Minimap.isFlagPresent(500)) or
        (not Minimap.isPlayerMoving(300)) or (T.GetTime > 15000));

  wait(1000);
end;

//procedure ClickDots();
procedure ClickDots();
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  x, y: Integer;
  cs: TColorSettings;

begin

  if FindColorsTolerance(TPA, 215, Minimap.GetBounds, 27, cs)  then
  begin
    ATPA := TPA.Cluster(5);
    TPA := ATPA.Biggest();

    x := TPA[Random(Length(TPA))].X;
    y := TPA[Random(Length(TPA))].Y;

    Mouse.Move(RandomRange(x - 3, x + 3) , RandomRange(y - 3, y + 3));
    Mouse.Click(mouse_Left);

    repeat
      {$IFDEF SMART}
        Smart.Image.Clear;
        Smart.Image.DrawText('Bones: ' + IntToStr(boneCount), Point(615, 207), clBlue);
        Smart.Image.DrawText('Inv Time: ' + IntToStr(Round(invTime.GetTime()/1000)) + ' s', Point(615, 453), clBlue);
      {$ENDIF}
      wait(RandomRange(150,300));
    until((not Minimap.isFlagPresent(500)) or (not Minimap.isPlayerMoving(300)));
    Wait(1000);
  end;
end;

//procedure ClickHotSpot();
procedure ClickHotSpot();
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  x, y: Integer;
  cs: TColorSettings;

begin
  ATPA := boneCoordArray.Cluster(CLUSTER);
  ATPA.FilterSize(SIZE, __GT__);

  TPA := ATPA[Random(Length(ATPA))];

  x := TPA[Random(Length(TPA))].X;
  y := TPA[Random(Length(TPA))].Y;

  WalkTo([Point(x, y)]);
  Wait(1000);
end;

//function LockedOut(): Boolean;
function LockedOut(): Boolean;
var
  timer: TTimeMarker;
  waitTime: Integer;

begin
  timer.Start();
  waitTime := RandomRange(2500, 3500);
  repeat
    Wait(250);
  until((not Minimap.isFlagPresent()) or (timer.GetTime() > waitTime));

  if(Chatbox.GetLastMessage(CHATBOX_COLORS).Startswith('I can')) then
    Exit(True);
end;

//procedure OpenDoor();
procedure OpenDoor();
var
  TPA, Door: TPointArray;
  ATPA: T2DPointArray;

begin

  if(SRL.FindColors(TPA, CTS2(1791857, 9, 0.03, 0.31), MainScreen.GetBounds) > 0) then
  begin
    ATPA := TPA.Cluster(2);
    ATPA.FilterSize(400, 1000);
    ATPA.SortByIndex(MainScreen.GetMiddle());

    {$IFDEF SMART}
      Smart.Image.DrawATPA(ATPA);
    {$ENDIF}

    for Door in ATPA do
    begin
      Wait(RandomRange(500, 1000));
      Mouse.Move(Door[Random(Length(Door))]);
      if MainScreen.IsUpText('pen') then
      begin
        Mouse.Click(mouse_Right);
        if ChooseOption.Select(['pen'], mouse_Left, True, False) then
        begin
          Writeln('Door: ' + IntToStr(Door.Len()));
          repeat
            Wait(RandomRange(150,300));
          until(not Minimap.isFlagPresent(100));
          {$IFDEF SMART}
            Smart.Image.Clear;
          {$ENDIF}
          Exit;
        end;
      end
      else
      begin
        {$IFDEF SMART}
          Smart.Image.Clear;
        {$ENDIF}
        Exit;
      end;
    end;
    {$IFDEF SMART}
      Smart.Image.Clear;
    {$ENDIF}
    ClickDots();
  end
  else
    ClickDots();
end;

//Procedure: findBones
function findBones(): Boolean;
var
  TPA, Bone, Door: TPointArray;
  ATPA, ATPA2: T2DPointArray;
  continue: boolean;
  txt: String;
  invCount: Integer;

begin
  if not SRL.isLoggedIn() then
    TerminateScript;

  Writeln('PS-----------------------------------------: ' + IntToStr(SRL.GetPixelShift(MainScreen.GetPlayerBox(), 100)));
  if(SRL.FindColors(TPA, CTS2(11382198, 20, 0.10, 0.09), MainScreen.GetBounds) > 0) then
  begin
    if(SRL.GetPixelShift(MainScreen.GetPlayerBox(), 100) > 1000) then
      Exit;

    ATPA := TPA.Cluster(4);
    ATPA.FilterSize(30, 300);
    ATPA.SortByIndex(MainScreen.GetMiddle());

    {$IFDEF SMART}
      Smart.Image.DrawATPA(ATPA);
    {$ENDIF}

    continue := true;
    for Bone in ATPA do
    begin
      {$IFDEF SMART}
        Smart.Image.Clear;
        Smart.Image.DrawText('Bones: ' + IntToStr(boneCount), Point(615, 207), clBlue);
        Smart.Image.DrawText('Inv Time: ' + IntToStr(Round(invTime.GetTime()/1000)) + ' s', Point(615, 453), clBlue);
      {$ENDIF}
      Mouse.SetPosition(Bone[Random(Length(Bone))]);
      //Mouse.Move(Bone[Random(Length(Bone))]);
      txt := MainScreen.GetUpText();

      if MainScreen.IsUpText(['ake']) then
      begin
        Mouse.Click(mouse_Right);

        if ChooseOption.Select(['one'], mouse_Left, True, False) then
        begin
          if LockedOut() then
          begin
            OpenDoor();
            {$IFDEF SMART}
              Smart.Image.Clear;
            {$ENDIF}
            Exit(False);
          end;

          invCount := Inventory.Count();
          waitLoop();

          if(Inventory.Count > invCount)then
          begin
            log := AppendFile('C:\Simba\Scripts\looting\log.txt');
            WriteFileString(log, '[' + IntToStr(Walk.GetMyPos().X) + ', ' + IntToStr(Walk.GetMyPos().Y) + ']');
            CloseFile(log);

            boneCoordArray.Append(Walk.GetMyPos());
            boneCount := boneCount + 1;
          end;

          continue := false;
          {$IFDEF SMART}
            Smart.Image.Clear;
          {$ENDIF}
          write('-->');
          writeln(Bone.Len);
          boneTime.Reset();
          boneTime.Start();
          Exit(True);
        end;
        Wait(RandomRange(350,1000));
      end;
      Writeln(Bone.Len);
    end;
    if (boneTime.GetTime() > 60000) then
    begin
      ClickHotSpot();
      boneTime.Reset();
      boneTime.Start();
    end
    else
      ClickDots();
  end;
  {$IFDEF SMART}
    Smart.Image.Clear;
  {$ENDIF}
  Result := False;
end;

//Procedure: doBank
procedure doBank();
var
  TPA, TPA2, Stairs, Banker: TPointArray;
  ATPA, ATPA2: T2DPointArray;
  Temp: TPoint;
  continue: boolean;

begin
  if not SRL.isLoggedIn() then
    TerminateScript;

  if not (Minimap.GetCompassAngle(true) = 0) then
  begin
    Minimap.SetCompassAngle(0,false);
    wait(RandomRange(500,1000));
    MainScreen.SetAngle(true);
    wait(RandomRange(500,1000));
  end;

  //climb up bottom flight of stairs
  if(SRL.FindColors(TPA, CTS2(606304, 0, 0, 0), MainScreen.GetBounds) > 0) then
  begin
    continue := false;
    ATPA := TPA.Cluster(2);
    writeln(ATPA.Len);
    ATPA.FilterSize(10, 100);
    ATPA.SortByIndex(MainScreen.GetMiddle);

    for Stairs in ATPA do
    begin
      Mouse.Move(Stairs[Random(Length(Stairs))]);

      Mouse.Click(mouse_Right);
      if ChooseOption.Select('limb-up',mouse_left,true,false) then
      begin
        continue := true;
        repeat
          wait(randomRange(150,300));
        until(not Minimap.isFlagPresent(100));
        wait(randomRange(1200,1500));
        Break;
      end;
    end;
  end;

  //climb up top flight of stairs
  if((SRL.FindColors(TPA, CTS2(606304, 0, 0, 0), MainScreen.GetBounds) > 0) and continue) then
  begin
    continue := false;
    ATPA := TPA.Cluster(2);
    writeln(ATPA.Len);
    ATPA.FilterSize(25, 100);
    ATPA.SortByIndex(MainScreen.GetMiddle);

    for Stairs in ATPA do
    begin
      Mouse.Move(Stairs[Random(Length(Stairs))]);

      Mouse.Click(mouse_Right);
      if ChooseOption.Select('limb-up',mouse_left,true,false) then
      begin
        continue := true;
        repeat
          wait(randomRange(150,300));
        until(not Minimap.isFlagPresent(100));
        wait(randomRange(1200,1500));
        Break;
      end;
    end;
  end;

  //walk to bank symbol
  if((SRL.FindColors(TPA2, CTS2(16620110, 0, 0, 0), Minimap.GetBounds) > 0) and continue) then
  begin
    ATPA2 := TPA2.Cluster(2);
    ATPA2.FilterSize(1, 10);
    ATPA2.SortByIndex(Minimap.GetMiddle);

    for Banker in ATPA2 do
    begin
      Mouse.Click(Banker[0],mouse_left);
        repeat
          wait(randomRange(150,300));
        until(not Minimap.isFlagPresent(100));
        wait(randomRange(500,1200));
      Break;
    end;
  end;

  //walk into bank
  if((SRL.FindColors(TPA2, CTS2(1349549, 3, 0.03, 0.62), MainScreen.GetBounds) > 0) and continue) then
  begin
    ATPA2 := TPA2.Cluster(2);
    ATPA2.FilterSize(30, 500);

    Temp := Minimap.GetMiddle;
    Temp.X := 515;
    Temp.Y := 4;
    ATPA2.SortByIndex(Temp);

    for Banker in ATPA2 do
    begin
      Mouse.Click(Banker[Banker.Len-1],mouse_left);
        repeat
          wait(randomRange(150,300));
        until(not Minimap.isFlagPresent(100));
        wait(randomRange(1000,1200));
      Break;
    end;
  end;

  //deposit in bank
  myAntiban();
  if not (Minimap.GetCompassAngle(true) = 0) then
  begin
    Minimap.SetCompassAngle(0,false);
    wait(RandomRange(500,1000));
    MainScreen.SetAngle(true);
  end;
  BankScreen.Open(blLumbridge);
  if BankScreen.IsOpen(5000) then
  begin
    wait(randomRange(150, 500));
    BankScreen.DepositAll();
    wait(randomRange(3000,5000));
  end;

  //walk to stairs
  Temp.X := RandomRange(635,650);
  Temp.Y := RandomRange(140,155);
  Mouse.Move(Temp);
  Mouse.Click(mouse_Left);
        repeat
          wait(randomRange(150,300));
        until(not Minimap.isFlagPresent(100));
        wait(randomRange(1500,3000));

  //climb down top flight of stairs
  if((SRL.FindColors(TPA, CTS2(604758, 0, 0, 0), MainScreen.GetBounds) > 0) and continue) then
  begin
    continue := false;
    ATPA := TPA.Cluster(2);
    writeln(ATPA.Len);
    ATPA.FilterSize(1, 25);
    ATPA.SortByIndex(MainScreen.GetMiddle);

    for Stairs in ATPA do
    begin
      Mouse.Move(Stairs[Random(Length(Stairs))]);

      Mouse.Click(mouse_Right);
      if ChooseOption.Select('limb-down',mouse_left,true,false) then
      begin
        continue := true;
         repeat
          wait(randomRange(150,300));
        until(not Minimap.isFlagPresent(100));
        wait(randomRange(1200,1500));
        Break;
      end;
    end;
  end;

  //climb down bottom flight of stairs
  if((SRL.FindColors(TPA, CTS2(606304, 0, 0, 0), MainScreen.GetBounds) > 0) and continue) then
  begin
    continue := false;
    ATPA := TPA.Cluster(2);
    writeln(ATPA.Len);
    ATPA.FilterSize(10, 100);
    ATPA.SortByIndex(MainScreen.GetMiddle);

    for Stairs in ATPA do
    begin
      Mouse.Move(Stairs[Random(Length(Stairs))]);

      Mouse.Click(mouse_Right);
      if ChooseOption.Select('limb-down',mouse_left,true,false) then
      begin
        continue := true;
        repeat
          wait(randomRange(150,300));
        until(not Minimap.isFlagPresent(100));
        wait(randomRange(1200,1500));
        Break;
      end;
    end;
  end;

end;


//Main Loop
begin
  if setUp() then
    writeln('Ready to roll!');

  repeat
    if Inventory.IsFull() then
    begin
      walkTo(pLumbyCourt);
      doBank();
    end;

    if (not Inventory.IsFull()) then
    begin
      walkTo(pGobYard);
      if(Minimap.GetRunEnergy() > 80) then
      begin
        Minimap.ToggleRun(True);
      end
      else
        Minimap.ToggleRun(False);

      boneTime.Reset();
      boneTime.Start();

      invTime.Reset();
      invTime.Start();
    end;

    while(not Inventory.IsFull()) do
    begin
      myAntiban();
      {$IFDEF SMART}
        Smart.Image.Clear;
        Smart.Image.DrawText('Bones: ' + IntToStr(boneCount), Point(615, 207), clBlue);
        Smart.Image.DrawText('Inv Time: ' + IntToStr(Round(invTime.GetTime()/1000)) + ' s', Point(615, 453), clBlue);
      {$ENDIF}

      findBones();
    end;

  until(false);

end.
